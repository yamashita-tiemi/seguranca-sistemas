"""
Criptoan√°lise da Cifra de C√©sar usando An√°lise de Frequ√™ncia de Letras
Quebra cifras de C√©sar sem conhecer a chave, baseado nas frequ√™ncias das letras em portugu√™s.
"""

import collections
import string

# Frequ√™ncias das letras em portugu√™s brasileiro (%)
FREQUENCIA_PORTUGUES = {
    'a': 14.63, 'e': 12.57, 'o': 10.73, 's': 7.81, 'r': 6.53,
    'i': 6.18, 'n': 5.05, 'd': 4.99, 'm': 4.74, 'u': 4.63,
    't': 4.34, 'c': 3.88, 'l': 2.78, 'p': 2.52, 'v': 1.67,
    'g': 1.30, 'h': 1.28, 'q': 1.20, 'b': 1.04, 'f': 1.02,
    'z': 0.47, 'j': 0.40, 'x': 0.21, 'k': 0.02, 'w': 0.01,
    'y': 0.01
}

def cifra_cesar_decriptar(texto_cifrado, chave):
    """
    Decripta um texto cifrado com Cifra de C√©sar.
    
    Args:
        texto_cifrado (str): Texto cifrado
        chave (int): Chave de deslocamento (1-25)
    
    Returns:
        str: Texto decriptado
    """
    chave = chave % 26
    resultado = ""
    
    for caractere in texto_cifrado:
        if caractere.isalpha():
            ascii_base = 65 if caractere.isupper() else 97
            indice = ord(caractere) - ascii_base
            novo_indice = (indice - chave) % 26
            novo_caractere = chr(novo_indice + ascii_base)
            resultado += novo_caractere
        else:
            resultado += caractere
    
    return resultado

def calcular_frequencia_texto(texto):
    """
    Calcula a frequ√™ncia percentual de cada letra no texto.
    
    Args:
        texto (str): Texto para an√°lise
    
    Returns:
        dict: Frequ√™ncias percentuais das letras
    """
    # Remove caracteres n√£o-alfab√©ticos e converte para min√∫sculas
    texto_limpo = ''.join(c.lower() for c in texto if c.isalpha())
    
    if len(texto_limpo) == 0:
        return {letra: 0 for letra in string.ascii_lowercase}
    
    # Conta ocorr√™ncias
    contador = collections.Counter(texto_limpo)
    total_letras = len(texto_limpo)
    
    # Calcula frequ√™ncias percentuais
    frequencias = {}
    for letra in string.ascii_lowercase:
        count = contador.get(letra, 0)
        frequencias[letra] = (count / total_letras) * 100
    
    return frequencias

def calcular_chi_quadrado(freq_observada, freq_esperada):
    """
    Calcula o valor chi-quadrado entre frequ√™ncias observadas e esperadas.
    Menor valor indica melhor correspond√™ncia com o padr√£o esperado.
    
    Args:
        freq_observada (dict): Frequ√™ncias observadas no texto
        freq_esperada (dict): Frequ√™ncias esperadas (padr√£o portugu√™s)
    
    Returns:
        float: Valor chi-quadrado
    """
    chi_quadrado = 0
    
    for letra in string.ascii_lowercase:
        observada = freq_observada.get(letra, 0)
        esperada = freq_esperada.get(letra, 0)
        
        if esperada > 0:
            chi_quadrado += ((observada - esperada) ** 2) / esperada
    
    return chi_quadrado

def criptoanalise_cesar(texto_cifrado, mostrar_processo=True):
    """
    Realiza criptoan√°lise da Cifra de C√©sar usando an√°lise de frequ√™ncia.
    
    Args:
        texto_cifrado (str): Texto cifrado para quebrar
        mostrar_processo (bool): Se deve mostrar o processo de an√°lise
    
    Returns:
        list: Lista de tuplas (chave, pontuacao, texto_decriptado) ordenada por probabilidade
    """
    if mostrar_processo:
        print("=== CRIPTOAN√ÅLISE POR FREQU√äNCIA DE LETRAS ===")
        print(f"Texto cifrado: {texto_cifrado}")
        texto_limpo = ''.join(c for c in texto_cifrado if c.isalpha())
        print(f"Total de letras: {len(texto_limpo)}")
        
        if len(texto_limpo) < 50:
            print("‚ö†Ô∏è  AVISO: Texto curto. An√°lise pode ser imprecisa.")
        
        print("\nTestando todas as chaves poss√≠veis...\n")
    
    resultados = []
    
    # Testa todas as chaves de 1 a 25
    for chave in range(1, 26):
        # Decripta com a chave atual
        texto_decriptado = cifra_cesar_decriptar(texto_cifrado, chave)
        
        # Calcula frequ√™ncias do texto decriptado
        freq_observadas = calcular_frequencia_texto(texto_decriptado)
        
        # Calcula chi-quadrado (menor = melhor)
        pontuacao = calcular_chi_quadrado(freq_observadas, FREQUENCIA_PORTUGUES)
        
        resultados.append((chave, pontuacao, texto_decriptado))
        
        if mostrar_processo:
            preview = texto_decriptado[:60] + "..." if len(texto_decriptado) > 60 else texto_decriptado
            print(f"Chave {chave:2d}: œá¬≤ = {pontuacao:7.2f} | {preview}")
    
    # Ordena por pontua√ß√£o (menor chi-quadrado = melhor)
    resultados.sort(key=lambda x: x[1])
    
    return resultados

def mostrar_resultados_detalhados(resultados, top_n=5):
    """
    Mostra os melhores resultados da criptoan√°lise de forma detalhada.
    
    Args:
        resultados (list): Lista de resultados da criptoan√°lise
        top_n (int): N√∫mero de melhores resultados para mostrar
    """
    print(f"\n=== TOP {top_n} MELHORES RESULTADOS ===")
    print("-" * 70)
    
    for i, (chave, pontuacao, texto) in enumerate(resultados[:top_n]):
        print(f"\n{i+1}¬∫ LUGAR - Chave {chave} (œá¬≤ = {pontuacao:.2f}):")
        print(f"'{texto}'")
        
        if i == 0:
            print("üëÜ RESULTADO MAIS PROV√ÅVEL")

def analisar_frequencias_detalhadas(texto):
    """
    Mostra an√°lise detalhada das frequ√™ncias de um texto.
    
    Args:
        texto (str): Texto para an√°lise
    """
    freq_observadas = calcular_frequencia_texto(texto)
    
    print("\n=== AN√ÅLISE DETALHADA DE FREQU√äNCIAS ===")
    print(f"Texto: {texto[:100]}{'...' if len(texto) > 100 else ''}")
    
    texto_limpo = ''.join(c for c in texto if c.isalpha())
    print(f"Total de letras analisadas: {len(texto_limpo)}")
    
    print("\n" + "="*55)
    print("| Letra | Observada | Esperada | Diferen√ßa |")
    print("="*55)
    
    # Ordena por frequ√™ncia observada (decrescente)
    letras_ordenadas = sorted(freq_observadas.items(), key=lambda x: x[1], reverse=True)
    
    for letra, freq_obs in letras_ordenadas:
        if freq_obs > 0:  # S√≥ mostra letras que aparecem
            freq_esp = FREQUENCIA_PORTUGUES[letra]
            diferenca = freq_obs - freq_esp
            status = "‚úì" if abs(diferenca) < 2 else "‚ö†" if abs(diferenca) < 5 else "‚úó"
            
            print(f"|   {letra}   |   {freq_obs:5.2f}%  |  {freq_esp:5.2f}%  |  {diferenca:+6.2f}% {status} |")
    
    print("="*55)
    print("‚úì = Diferen√ßa pequena | ‚ö† = Diferen√ßa m√©dia | ‚úó = Diferen√ßa grande")

def quebrar_cifra_cesar(texto_cifrado):
    """
    Fun√ß√£o principal para quebrar uma Cifra de C√©sar.
    
    Args:
        texto_cifrado (str): Texto cifrado
    
    Returns:
        tuple: (melhor_chave, melhor_texto, todos_resultados)
    """
    resultados = criptoanalise_cesar(texto_cifrado)
    mostrar_resultados_detalhados(resultados)
    
    melhor_chave, _, melhor_texto = resultados[0]
    
    return melhor_chave, melhor_texto, resultados

# Exemplo de uso
if __name__ == "__main__":
    print("CRIPTOAN√ÅLISE DA CIFRA DE C√âSAR")
    print("=" * 50)
    
    while True:
        print("\n1. Quebrar cifra (criptoan√°lise)")
        print("2. Analisar frequ√™ncias de um texto")
        print("3. Exemplo de demonstra√ß√£o")
        print("0. Sair")
        
        try:
            opcao = int(input("\nEscolha uma op√ß√£o: "))
            
            if opcao == 0:
                print("Encerrando...")
                break
                
            elif opcao == 1:
                texto_cifrado = input("\nDigite o texto cifrado: ")
                chave, texto_original, _ = quebrar_cifra_cesar(texto_cifrado)
                
                print(f"\nüîì CIFRA QUEBRADA!")
                print(f"Chave mais prov√°vel: {chave}")
                print(f"Texto original: '{texto_original}'")
                
            elif opcao == 2:
                texto = input("\nDigite o texto para an√°lise: ")
                analisar_frequencias_detalhadas(texto)
                
            elif opcao == 3:
                # Exemplo de demonstra√ß√£o
                print("\n=== EXEMPLO DE DEMONSTRA√á√ÉO ===")
                
                # Texto original
                texto_original = "Esta √© uma mensagem secreta que precisa ser decifrada usando an√°lise de frequ√™ncia"
                print(f"Texto original: {texto_original}")
                
                # Simula encripta√ß√£o com chave 7
                from random import randint
                chave_real = randint(1, 25)
                
                # Encripta manualmente para demonstra√ß√£o
                texto_cifrado = ""
                for c in texto_original:
                    if c.isalpha():
                        base = 65 if c.isupper() else 97
                        novo = chr((ord(c) - base + chave_real) % 26 + base)
                        texto_cifrado += novo
                    else:
                        texto_cifrado += c
                
                print(f"Texto cifrado (chave {chave_real}): {texto_cifrado}")
                
                # Quebra a cifra
                chave_encontrada, texto_decifrado, _ = quebrar_cifra_cesar(texto_cifrado)
                
                print(f"\nüéØ RESULTADO:")
                print(f"Chave real: {chave_real}")
                print(f"Chave encontrada: {chave_encontrada}")
                print(f"Sucesso: {'‚úÖ SIM' if chave_real == chave_encontrada else '‚ùå N√ÉO'}")
                
            else:
                print("Op√ß√£o inv√°lida!")
                
        except ValueError:
            print("Digite um n√∫mero v√°lido!")
        except KeyboardInterrupt:
            print("\nEncerrando...")
            break